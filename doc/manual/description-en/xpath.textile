---
layout: main
title: "XPath expressions"
---

h1. XPath expressions

The speedata Publisher accepts XPath expressions in some attributes. These attributes are called @test@ or @select@ or documented as such. In all other attributes XPath expressions can be used via curly braces (@{@ and @}@). In the following example XPath expressions are used in the attribute @width@ and in the element @Value@. The width of the textblock is taken from the variable @$width@, the contents of the paragraph is the string value of the current node.


{% highlight xml %}
<PlaceObject>
  <Textblock width="{$width}" fontface="text" textformat="text with indentation">
    <Paragraph>
      <Value select="."/>
    </Paragraph>
  </Textblock>
</PlaceObject>
{% endhighlight %}

The next example uses the @test@ attribute. The given XPath expression must return either _true_ or _false_.

{% highlight xml %}
<Switch>
  <Case test="$article = 1 and sd:current-page() > 4">
  	....
  </Case>
  <Otherwise>
  	....
  </Otherwise>
</Switch>
{% endhighlight %}


h2. The following XPath expressions are handled by the software:

* Number: Return the value without change: @5@
* Text: Return the text without chang: @'hello world'@
* Arithmetic operation (@*@, @div@, @idiv@, @+@, @-@, @mod@). Example: @( 6 + 4.5 ) * 2@
* Variables. Example: @$column + 2@
* Access to the current node (dot operator). Example: @. + 2@
* Access to subelements. Examples: @productdata@, @node()@, @*@
* Attribute access in the current node. Example @@a@
* Boolean expressions: @<@, @>@, @<=@, @>=@, @=@, @!=@. Attention, the less than symbol @<@ *must* be written in XML as @&lt;@, the symbol @>@ *can* be written as @&gt;@. Example: @$number > 6@. Can be used in tests.

h2. The following XPath functions are known to the system:


There are two classes of XPath functions: standard XPath functions and speedata Publisher specific ones. The specific functions are in the namespace @urn:speedata:2009/publisher/functions/en@ (denoted by @sd:@ below). The standard functions should behave like documented by the XPath 2.0 standard.

- sd:current-page() := Return the current page number.
- sd:current-row() := Return the current row.
- sd:current-column() := Return the current column.
- sd:current-framenumber(&lt;name>) := Return the current frame number of given positioning area.
- sd:alternating(&lt;type>, &lt;text>,&lt;text>,.. ) := On each call the next element will be returned. You can define more alternating sequences by using distinct type values. Example: @sd:alternating("tbl", "White","Gray")@ can be used for alternating color of table rules. To reset the state, use @sd:reset-alternating(<type>)@.
- sd:decode-html(&lt;node>) := Change text such as @&lt;i&gt;italic&lt;/i&gt;@ into HTML markup.
- sd:reset-alternating(&lt;type>) := Reset alternating so the next @sd:alternating()@ starts again from the first element.
- sd:number-of-datasets(&lt;Sequence>) := Return the number of records of the sequence.
- sd:number-of-pages(&lt;filename or URI schema>) := Determines the number of pages of a (PDF-)file.
- sd:number-of-columns() := Number of columns in the current grid.
- sd:number-of-rows() := Number of rows in the current grid.
- sd:imageheight(&lt;filename or URI schema>) := Natural height of the image in grid cells. Attention: if the image is not found, the height of the file-not-found placeholder will be returned. Therefore you need to check in advance if the image exists.
- sd:imagewidth(&lt;filename or URI schema>) := Natural width of the image in grid cells. Attention: if the image is not found, the width of the file-not-found placeholder will be returned. Therefore you need to check in advance if the image exists.
- sd:file-exists(&lt;filename or URI schema>) := True if file exists in the current search path. Otherwise it returns false.
- sd:format-number(Number or string, thousands separator, comma separator) := Format the number and insert thousands separators and change comma separator. Example: @sd:format-number(12345.67, ',','.')@ returns the string @12,345.67@.
- sd:format-string(Number or string,formatting instructions) :=  Return a text string with the number formatted as given by the formatting instructions. These instructions are the same as the instructions by the C function @printf()@.
- sd:even(&lt;number>) := True if number is even. Example: @sd:even(sd:current-page())@
- sd:odd(&lt;number>) := True if number is odd.
- sd:groupwidth(&lt;string>) := Return the number of gridcells of the given group's width. The argument must be the name of an existing group. Example: @sd:groupwidth('My group')@
- sd:groupheight(&lt;string>) := Return the given group's height (in gridcells). See @sd:groupwidth(...)@
- sd:pagenumber(&lt;string>) := Get the number of the page where the given mark is placed on. See the command "Mark":../commands-en/mark.html.
- sd:variable(&lt;name>) := The same as $name. This function allows variable names to be constructed dynamically. Example: @sd:variable(concat('myvar',$num))@ - if @$num@ contains the number 3, the resulting variable is @myvar3@.
- sd:sha1(&lt;value>,&lt;value>, ...) := Return the SHA-1 sum of the concatenation of each value as a hex string. Example: @sd:sha1('hello ', 'world')@ gives the string @2aae6c35c94fcfb415dbe95f408b9ce91ee846ed@.

- concat( &lt;value>,&lt;value>, ... ) := Create a new text value by concatinating the
- count(&lt;text>) := Counts all child elements with the given name. Example: @count(article)@ counts, how many child elements with the name @article@ exists.
- ceiling() :=  Returns the smallest number with no fractional part that is not less than the value of the given argument.
- empty(&lt;attribute>) := Checks, if an attribute is (not) available.
- false() := Return __false__.
- floor() := Returns the largest number with no fractional part that is not greater than the value of the argument.
- last() := Return the number of elements of the same named sibling elements. *Not yet XPath conform.*
- not() := Negates the value of the argument. Example: @not(true())@ returns @false()@.
- position() := Return the position of the current node.
- string(&lt;sequence>) := Return the text value of the sequence e.g. the contents of the elemements.
- string-join(&lt;sequence>,separator) := Return the string value of the sequence, where each element is separated by the separator.
- true() := Return __true__.

h2. Todo document:

- abs()
- ceiling()
- max()
- min()
- normalize-space()
- node()
- string()
- upper-case()
