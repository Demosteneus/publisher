---
layout: subdir
title: "XPath Ausdrücke"
---

h1. The english translation is work-in-progess and may not be finished


h1. XPath expressions

Der Publisher akzeptiert in den den entsprechend markierten Attributen (zumeist @auswahl@) XPath Ausdrücke. In allen anderen Attributen kann durch die geschweiften Klammern (@{@ und @}@) ein XPath Ausdruck erzwungen werden). In diesem Beispiel werden im Attribut @breite@ und im Element @Wert@ die Werte dynamisch erzeugt, d.h. für die Angabe der Breite wird auf den Inhalt der Variablen @breite@ zurückgegriffen, der Inhalt des Absatzes ist der Inhalt (Textwert) des gerade aktuellen Datenknotens.

{% highlight xml %}
<Textblock breite="{$breite}" schriftart="text" textformat="Text mit Einrückung">
  <Absatz>
    <Wert auswahl="."/>
  </Absatz>
</Textblock>
{% endhighlight %}


h2. Folgende XPath-Ausdrücke erkennt das System:

* Zahl: gibt den Wert direkt zurück. Beispiel: @"5"@
* Text: gibt den Wert direkt zurück. Beispiel: @'Text'@
* Rechenoperationen (@*@, @div@, @+@, @-@, @mod@). Beispiel: @( 6 + 4.5 ) * 2@
* Zugriff auf Variablen. Beispiel: @$spalte + 2@
* Zugriff auf den aktuellen Knoten (Punkt-Operator). Beispiel: @. + 2@
* Zugriff auf Unterelemente. Beispiel: @produktdaten@, @node()@, @*@
* Zugriff auf Attribute im aktuellen Knoten. Beispiel @@a@
* Boolesche Ausdrücke: @<@, @>@, @<=@, @>=@, @=@, @!=@. Vorsicht, das Zeichen @<@ muss in XML als @&lt;@ geschrieben werden, das Zeichen @>@ kann als @&gt;@ geschrieben werden. Beispiel: @$zahl > 6@. Kann in Bedingungen benutzt werden.

h2. Folgende XPath-Funktionen stehen bereit (im Namensraum @urn:speedata:2009/publisher/functions/de@):


- sd:aktuelle-seite() := Gibt die Seitennummer zurück.
- sd:aktuelle-zeile() := Gibt die aktuelle Zeile zurück.
- sd:aktuelle-spalte() := Gibt die aktuelle Spalte zurück.
- sd:alternierend(&lt;text>,&lt;text>,.. ) := Bei jedem Aufruf wird das nächste Argument zurück gegeben. Beispiel: @sd:alternierend("Weiß","Grau")@ könnte für die Hintergrundfarbe von Tabellen benutzt werden. Derzeit gibt es keine Möglichkeit, den Wert wieder am Anfang starten zu lassen.
- sd:anzahl-datensätze(&lt;Sequenz>) := Gibt die Anzahl der Datensätze der Sequenz zurück.
- sd:anzahl-seiten(&lt;Dateiname>) := Ermittelt die Anzahl der Seiten der angegebenen (PDF-)Datei.
- sd:anzahl-spalten() := Gibt die Anzahl der Spalten im aktuellen Raster.
- sd:anzahl-zeilen() := Gibt die Anzahl der Zeilen im aktuellen Raster.
- sd:bildbreite(&lt;Dateiname>) := Breite des Bildes in Rasterzellen. Vorsicht: sollte das Bild nicht gefunden werden, wird die Breite des Platzhalters für nicht gefundene Bilder zurückgegeben. Daher muss vorher überprüft werden, ob das Bild existiert.
- sd:datei-vorhanden(&lt;Dateiname>) := Wahr, wenn der Dateiname im Suchpfad existiert, ansonsten false.
- sd:formatiere-zahl(Zahl,Formartierungsangaben) := Gibt eine Zeichenkette zurück, die die gegebene Zahl mit den im zweiten Argument gegebenen Formatierungsanweisungen darstellt. Die Formatierungsanweisungen entsprechen der aus der Programmiersprache C bekannten @printf()@-Funktion.
- sd:gerade(&lt;zahl>) := Wahr, wenn die angegebene Zahl gerade ist. Beispiel: @sd:gerade(sd:aktuelle-seite())@
- sd:ungerade(&lt;zahl>) := Wahr, wenn die angegebene Zahl unggerade ist.
- sd:gruppenbreite(&lt;string>) := Gibt die Breite in Rasterzellen für die Gruppe im ersten Argument an. Beispiel: @sd:gruppenbreite('Beispielgruppe')@
- sd:gruppenhöhe(&lt;string>) := Gibt die Höhe in Rasterzellen für die Gruppe im ersten Argument an. Beispiel: @sd:gruppenbreite('Beispielgruppe')@
- sd:variable(&lt;Name>) := ist dasselbe wie $Name, nur mit der Möglichkeit den Namen auch dynamisch (z.B. mit @concat()@) zu erzeugen.

- concat( &lt;Wert>,&lt;Wert>, ... ) := Erzeugt einen neuen Text aus der Verkettung der einzelnen Werte.
- count() := Zählt alle Kindelemente mit dem angegebenen Namen. Beispiel: @count(eintrag)@ zählt, wie viele Kindelemente mit den Namen @eintrag@ existieren.
- empty(&lt;Attribut>) := Prüft, ob ein Attribut (nicht) vorhanden ist.
- false() := Gibt „Falsch“ zurück.
- last() := Gibt die Anzahl der Datensätze der gleichnamigen Geschwister-Elemente zurück. *Achtung: noch nicht XPath-konform.*
- position() := Ermittelt die Position des aktuellen Datensatzes.
- string(&lt;Sequenz>) := Gibt den Textwert der Sequenz zurück, d.h. den Inhalt der Elemente.
- true() := Gibt „Wahr“ zurück.
