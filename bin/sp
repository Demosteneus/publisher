#!/usr/bin/env node

// missing: 
// * installation in system check!
// * more open commands on other platforms
// * watchdog
// * webserver for process control

var argumentr     = require("../src/js/argumentr"),
    child_process = require('child_process'),
    sprintf       = require("../src/js/sprintf.js").sprintf,
    path          = require("path"),
    fs            = require("fs"),
    exec          = child_process.exec,
    spawn         = child_process.spawn,
    starttime     = new Date(),
    installdir    = path.join(path.dirname(process.argv[1]),".."),
    options       = { jobname: "publisher",layout: "layout.xml", data: "data.xml",runs: 1},
    layoutoptions = {},
    variables     = {},
	version,srcdir,inifile,
    children      = []

console.time("Total time")

if (installdir == "/usr") {
	console.log("Installed in system")
} else {
	version = "Version <lokal>"
    srcdir  = path.join(installdir,"src")
    inifile = path.join(srcdir,"lua/sdini.lua")
    process.env["PUBLISHER_BASE_PATH"] = installdir
    process.env["LUA_PATH"] = srcdir + "/lua/?.lua;" + installdir + "/lib/?.lua;" + srcdir + "/lua/common/?.lua;"
}

// -----------------------
function getversioninfo () {
    console.log(version)
}
function setvariable (argument) {
    var a = argument.split(/=/)
    variables[a[0]] = a[1]
}
function save_variables () {
    var filename = options.jobname + ".vars"

    var str = "return { "
    var keys = Object.keys(variables)
    for (var i = 0; i < keys.length; i++) {
        str = str + sprintf('["%s"] = "%s", ',keys[i],variables[keys[i]]) 
    };
    str = str + "}"
    fs.writeFileSync(filename,str)
}

function open_file (filename) {
    switch (process.platform) {
        case 'darwin':
            exec("open " + filename)
            break
        default:
            console.log("Can't open file: unknown operating system: " + process.platform)
            process.exit(-1)
    }
}

function openpdf () {
    if (options.autoopen) { open_file(options.jobname + "*pdf") }
}

function run_publisher_core (command,cmdary,runs,callback) {
    if ( runs >= 1 ) {
        var pubrun = spawn(command,cmdary)
        pubrun.stdout.on('data',function  (data) { process.stdout.write(data)})
        pubrun.stderr.on('data',function  (data) { process.stderr.write(data)})
        children.push(pubrun.pid)

        pubrun.on('exit',function (error) {
            if (error != 0) {
                console.log(error)
            } else {
                run_publisher_core(command,cmdary,runs - 1,callback)
            }
        })
    } else {
        callback()
        var duration = new Date(new Date() - starttime)
        var errlog = fs.createWriteStream(options.jobname  +".protocol",{encoding: 'utf8',flags: 'a'})
        errlog.write(sprintf("\nDuration: %02d:%02d:%02d.%03d\n",duration.getUTCHours(),duration.getMinutes(),duration.getSeconds(),duration.getMilliseconds()))
        errlog.end()
        console.timeEnd("Total time")

    }
}

function run_publisher (cfg) {
    process.env["SD_EXTRA_DIRS"] = cfg.getArray("extra-dir").join(":")
    save_variables()
    var errlog = fs.createWriteStream(options.jobname  +".protocol",{encoding: 'utf8'})
    errlog.write(sprintf("Protocol file for speedata Publisher (%s)\nTime: %s\n",version,starttime))
    errlog.end()
    var layoutoptions_ary = []

    if (layoutoptions.startpage) {
        layoutoptions_ary.push("startpage=\"" + parseInt(layoutoptions.startpage) + "\"")
    }
    if (layoutoptions.grid == true || layoutoptions.grid == false) {
         layoutoptions_ary.push("showgrid=\"" + ( layoutoptions.grid ? "true" : "false") + '"')
    }

    var jobname    = cfg.getString("jobname"),
        layoutname = cfg.getString("layout"),
        dataname   = cfg.getString("data"),
        runs       = cfg.getNumber("runs")
        cmdline = sprintf("%s/bin/sdluatex --interaction nonstopmode --jobname=%s --ini --lua=%s  publisher.tex %s %s %s",installdir,jobname,inifile,layoutname,dataname, layoutoptions_ary.join(",")),
        cmdary = cmdline.split(/\s+/),
        command = cmdary.shift()

    run_publisher_core(command,cmdary,runs,openpdf)
}

argumentr.start = 25
argumentr.on("--autoopen",           "Open the PDF file (MacOS X and Linux only)", options)
argumentr.on("--data NAME",          "Name of the XML data file. Defaults to 'data.xml'",options)
argumentr.on("--filter FILTER",      "Run XPROC filter before publishing starts", options)
argumentr.on("--grid",               "Display background grid. Disable with --no-grid",layoutoptions)
argumentr.on("--layout NAME",        "Name of the layout file. Defaults to 'layout.xml'",options)
argumentr.on("--jobname NAME",       "The name of the resulting PDF file, default is 'publisher.pdf'",options)
argumentr.on("--runs NUM",           "Number of publishing runs ", options)
argumentr.on("--startpage NUM",      "The first page number", layoutoptions )
argumentr.on("-v","--var VAR=VALUE", "Set a variable for the publishing run", setvariable)
argumentr.on("--version",            "Show version information",getversioninfo)
argumentr.on("-x", "--extra-dir DIR","Additional directory for file search", options)
argumentr.on("--xml",                "Output as (pseudo-)XML (for list-fonts)", options)

argumentr.command("list-fonts",      "List installed fonts (use together with --xml for copy/paste)")
argumentr.command("doc",             "Open documentation")
argumentr.command("watch",           "Start watchdog / hotfolder")
argumentr.command("run",             "Start publishing (default)",true)

var ret = argumentr.parse()
if (! ret.ok) {
    console.log(ret.msg)
    process.exit(-1)
}

// fix jobname
options.jobname = path.basename(options.jobname,".pdf")

process.on('SIGINT', function () {
    for (var i = 0; i < children.length; i++) {
        process.kill(children[i])
    };
    console.log("\nExit")
    process.exit(0)
});


switch(argumentr.cmd) {
    case 'doc':
        open_file(path.join(installdir,"/build/handbuch_publisher/index.html"))
        break
    case 'list-fonts':
        var cmdline = sprintf("%s/bin/sdluatex --luaonly %s/lua/sdscripts.lua %s list-fonts %s",installdir,srcdir,inifile,options.xml ? "xml" : "")
        exec(cmdline,function (err,stdout,stderr) { console.log(stdout); console.timeEnd("Total time") })
        break
    case 'run':
        var configuratr = require("../src/js/configuratr"),
            cfg         = new configuratr()

        cfg.options = options
        cfg.read("publisher.cfg")

        if (options.filter) {
            var filtername = path.basename(options.filter,".xpl")  + ".xpl"
            console.log("Run filter " + filtername)
            process.env["CLASSPATH"] = installdir + "/lib/calabash.jar:" + installdir + "/lib/saxon9he.jar"
            var cmdline = "java com.xmlcalabash.drivers.Main " + filtername
            exec(cmdline,function(err,stdout,stderr) {
                console.log(stdout); console.log(stderr)
                if (err) {
                    console.log(err)
                } else {
                    run_publisher(cfg)
                }
            })
        } else {
            run_publisher(cfg)
        }
        break
    case 'watch':
        console.log("start watchdog")
        var configuratr = require("../src/js/configuratr"),
            cfg         = new configuratr()

        if (path.existsSync("publisher.cfg")) {
            cfg.read("publisher.cfg")
        }
        var files = fs.readdirSync(process.cwd())
        var events_patterns = Object.keys(cfg["watchdog-patterns"])


        var matched_files = files.filter(function (file) {
            for (var i = 0; i < events_patterns.length; i++) {
                var regexp = new RegExp(events_patterns[i])
                if (file.match(regexp)) {
                    return true
                }
            }
            return false
        })
        for (var i = 0; i < matched_files.length; i++) {
            console.log("Watching: " + matched_files[i])
            var cmd = cfg["watchdog-patterns"][matched_files[i]]
            fs.watchFile(matched_files[i],{ persistent: true, interval: 100 }, function  (curr,prev) {
                // we need to compare the times, I don't know why
                if (curr.mtime > prev.mtime ) {
                    exec(cmd,function (err,stdout,stderr) { console.log(stdout);console.log(stderr); if(err) { console.log(err)} } )
                }
            })
        };
        break
    default:
        console.log("unknown command!")
        process.exit(-1)
}

