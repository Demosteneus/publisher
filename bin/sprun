#!/usr/bin/env texlua

-- If called with texlua from texlive, the require path is mangled.
-- Therefore we call our own binary in lua mode.
if arg[-1] == "texlua" then
  os.exec(string.format("sdluatex --luaonly %s %s", arg[0],table.concat(arg," ")))
end

local installdir=os.selfdir:gsub("^(.+)/bin$","%1")
local srcdir,inifile
version = nil

if installdir == "/usr" then
  version = "Version 0.1"
  srcdir = "/usr/share/speedata-publisher/sw"
  inifile = srcdir .. "/lua/sdini.lua"
  os.setenv("PUBLISHER_BASE_PATH","/usr/share/speedata-publisher")
  os.setenv("LUA_PATH",srcdir .. "/lua/?.lua;" .. srcdir .. "/lua/common/?.lua;" )
else
  version = "Version <lokal>"
  srcdir = installdir .. "/src"
  inifile = srcdir .. "/lua/sdini.lua"
  os.setenv("PUBLISHER_BASE_PATH",installdir)
  os.setenv("LUA_PATH",srcdir .. "/lua/?.lua;" .. installdir .. "/lib/?.lua;" .. srcdir .. "/lua/common/?.lua;")
end

local rcfile
rcfile = "publisher.conf"
if lfs.isfile(rcfile) then
  dofile(rcfile)
elseif lfs.isfile(os.getenv("HOME") .. "/" .. rcfile) then
  dofile(os.getenv("HOME") .. "/" .. rcfile)
end

local variables = {}
local optionen = optionen or {}
optionen["layoutoptionen"] = {}
optionen["extra_dirs"] = optionen["extra_dirs"] or {}
optionen["layoutname"] = optionen["layoutname"] or "layout.xml"
optionen["datenname"]  = optionen["datenname"]  or "daten.xml"
optionen["jobname"]    = optionen["jobname"]    or "publisher"
local command = "run"

function getversioninfo(  )
  print(string.format("speedata Publisher, %s\n© 2010-2011 speedata, alle Rechte vorbehalten",version))
  os.exit(0)
end

function opendoc(  )
  if os.name=="linux" then
    os.execute("gnome-open /usr/share/doc/speedata-publisher/index.html")
  elseif os.name=="macosx" then
    os.execute(string.format("open %s/build/handbuch_publisher/index.html",installdir))
  else
    print("Die Dokumentation kann nicht geöffnet werden, unbekanntes Betriebssystem")
  end
  os.exit(0)
end

package.path = os.getenv("LUA_PATH")

function save_variables()
  local vars = io.open(optionen.jobname .. ".vars", "w")
  vars:write("return { ")
  for k,v in pairs(variables) do
    vars:write(string.format("[%q] = %q, ",k,v ))
  end
  vars:write("}")
  vars:close()
end

require("optionparser")
local op = optionparser:new()
op.banner = string.format("Benutzung: sprun <optionen>")
op.start = 30
op:on("-h", "--help","Diese Hilfe",function() op:help() os.exit(0) end)
op:on("--version","Zeigt Versionsinformation an",getversioninfo)
op:on("--autoopen","Öffnet die erzeugte PDF-Datei (zur Zeit nur MacOS X und Linux)", function() optionen["autoopen"]=true end)
op:on("--ausgabename NAME","Bestimmt den Namen der PDF-Datei, Voreinstellung ist 'publisher.pdf'",function(x) if x:sub(-4)==".pdf" then optionen["jobname"]=x:sub(1,-5) else optionen["jobname"]=x end end )
op:on("--datenname NAME","Lädt Daten-XML mit dem Namen. Ohne diesen Parameter wird 'daten.xml' geladen.",function(x) optionen["datenname"]=x end)
op:on("--doc","Öffnet die Online-Hilfe",opendoc)
op:on("--filter FILTER","Führt den XPROC Filter aus, bevor die Verarbeitung startet", function(x) optionen["filter"]=x end)
op:on("--layoutname NAME","Lädt Layoutregelwerk mit dem Namen. Ohne diesen Parameter wird 'layout.xml' geladen.",function(x) optionen["layoutname"]=x end)
op:on("--list-fonts","Zeigt alle verfügbaren Schriftarten", function() command = "list-fonts" end)
op:on("--raster WERT","Bestimmt, ob das Raster angezeigt werden soll ('ja' oder 'nein')",function(x) local j = optionen["layoutoptionen"];  if x:lower()=="ja" then j["zeichne_raster"]='ja' else j["zeichne_raster"]='nein' end; end )
op:on("--startseite NUM","Legt die Startseite fest", function(x) optionen["layoutoptionen"]["startseite"]=x end)
op:on("-v","--var VAR=VALUE","Setzt eine Variable für den Layoutprozess", function (x) local tab = string.explode(x,"="); if tab[1] and tab[2] then variables[tab[1]] = tab[2] end end )
op:on("-x", "--extra-dir VERZEICHNIS", function (x) optionen.extra_dirs[#optionen.extra_dirs + 1]=x  end, "Extra Verzeichnisse für die Dateisuche")
op:on("--xml","Ausgabe als (Pseudo-)XML", function() optionen["xml"] = true end)
ok, msg = op:parse(arg)
if not ok then
  print(msg)
  os.exit(-1)
end

os.setenv("SD_EXTRA_DIRS",table.concat(optionen.extra_dirs,":"))

local layoutoptionen = {}
for k,v in pairs(optionen["layoutoptionen"]) do
  layoutoptionen[#layoutoptionen + 1] = string.format("%s=%q",k,v)
end

if command=="list-fonts" then
  local cmdline = string.format("%s/bin/sdluatex --luaonly %s/lua/sdscripts.lua %s list-fonts %s",installdir,srcdir,inifile,optionen.xml and "xml" or "")
  os.spawn(cmdline)
elseif command=="run" then
  save_variables()
  if optionen["filter"] then
    local filtername = optionen["filter"]
    if string.sub(filtername,-4) ~= ".xpl" then
      filtername = filtername .. ".xpl"
    end
    print(string.format("Starte Filter %s",filtername))
    os.setenv("CLASSPATH",installdir .. "/lib/calabash.jar:" .. installdir .. "/lib/saxon9he.jar")
    local cmdline="java com.xmlcalabash.drivers.Main pipe.xpl"
    os.spawn(cmdline)
  end
  local protokolldatei = string.format("%s.protokoll",optionen["jobname"])
  os.remove(string.format("%s.runs",optionen["jobname"]))
  os.remove(protokolldatei)
  errorlog = io.open(protokolldatei,"w")
  errorlog:write(string.format("Protokolldatei für speedata Publisher (%s) - %s\n", version, os.date()))
   -- errorlog:write(string.format("Dateiname = %s\n",tex.jobname))
  errorlog:close()
  local starttime = os.gettimeofday()
  local run = 1
   repeat
    os.setenv("PUBLISHER_LAUF",run)
    local cmdline = string.format("%s/bin/sdluatex --interaction nonstopmode --jobname=%q --ini --lua=%s  publisher.tex %s %q %q",installdir,optionen["jobname"],inifile,optionen["layoutname"],optionen["datenname"], table.concat(layoutoptionen,","))
    -- print(cmdline)
    local ok,err = os.spawn(cmdline)
    if ok==nil then
      print(string.format("Fehler = %q",err))
      os.exit(-1)
    end
  
    if lfs.isfile(string.format("%s.runs",optionen["jobname"])) then
      dofile(string.format("%s.runs",optionen["jobname"]))
    end
    runs = runs or 1
    run = run + 1
  until run > runs
  errorlog = io.open(protokolldatei,"a")
  errorlog:write(string.format("Gesamtdauer: %3f Sekunden\n",os.gettimeofday() - starttime))
  errorlog:close()
  if optionen["autoopen"] then
    if os.name == "macosx" then
      os.execute(string.format("open %s.pdf",optionen["jobname"]))
    elseif os.name == "linux" then
      os.execute(string.format("gnome-open %s.pdf",optionen["jobname"]))
    end
  end -- autoopen
else
  assert(false,"interner Fehler")
end

os.exit(0)
